# Methods for working with URLs and URIs.
import std.fs.path (Path)
import wobsite (INDEX_FILE)

let TAB = 9
let LF = 10
let CR = 13
let SPACE = 32
let HYPHEN = 45
let DOT = 46

# A table that maps bytes (based on their index) to a boolean that states if the
# byte can be included in URLs (and thus heading IDs). Bytes are used as an
# index, and if the value is `true`, it's safe to include the byte.
let URL_SAFE = [
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, true, true, false, true, true, true, true, true, true, true, true,
  true, true, false, false, false, false, false, false, false, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, false, false,
  false, false, true, false, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, false, false, false, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true, true, true, true, true, true,
  true, true, true, true, true, true, true, true,
]

# Generates a URL-safe path of the given string (e.g. a blog post title).
fn pub normalize(string: String) -> String {
  let url = ByteArray.new
  let iter = string.bytes.peekable

  loop {
    match iter.next {
      # If the byte is in the ASCII range A-Z, lowercase it; otherwise
      # we keep it as-is.
      case Some(v) if v >= 65 and v <= 90 -> url.push(v + 32)
      case Some(DOT) -> url.push(HYPHEN)
      case Some(v) if URL_SAFE.get(v) -> url.push(v)
      case Some(TAB or LF or CR or SPACE) -> {
        if url.last.or(-1) != HYPHEN { url.push(HYPHEN) }

        loop {
          match iter.peek {
            case Some(TAB or LF or CR or SPACE) -> iter.next
            case _ -> break
          }
        }
      }
      case Some(_) -> {}
      case _ -> break
    }
  }

  url.into_string
}

# Returns the relative URL for a file path in a directory.
fn pub file_url(directory: ref Path, path: ref Path) -> String {
  let rel = path.strip_prefix(directory).or_else(fn { path.clone })

  if rel.to_string == INDEX_FILE {
    '/'
  } else if rel.tail == INDEX_FILE {
    '/${rel.directory.with_extension('')}/'
  } else {
    '/${rel.with_extension('')}/'
  }
}

# Converts a relative URL to an absolute URL, based on the current/source URL of
# the document that links to the relative URL.
#
# The `current` argument specifies the URL of the document we are linking
# _from_, while `url` specifies the relative URL linked _to_.
#
# If `as_file` is set to `true`, the last component of the target URL is treated
# as if it were a file instead of a directory. This affects how many times we
# have to move "up" in the returned relative URL.
fn pub relative_to_absolute(
  current: String,
  url: String,
  as_file: Bool,
) -> String {
  let steps = url.split('/').take_while(fn (v) { v == '..' }).count
  let mut pending = steps + as_file.to_int
  let chunks = current.split('/').to_array

  while pending > 0 {
    chunks.pop
    pending -= 1
  }

  let base = String.join(chunks.into_iter, '/')
  let rel = String.join(url.split('/').skip(steps), '/')

  '${base}/${rel}'
}
